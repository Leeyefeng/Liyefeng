<html>
	<head>
		<meta charset="utf-8" />
		<title>2017.1.11 总结</title>
		<style>
		*{margin: 0;padding:0 ;font-family: "微软雅黑";}
		    h1{background-color: lightseagreen;color: #fff;padding: 20px 30px;box-shadow: 0 0 10px #3c3c3c;}
			.box{
				width: 800px;
				background-color: snow;
				margin: 80px auto;
				border-radius:10px ;
				
			}
			.box>p{
				margin: 5px 5px;
				padding: 10px 10px;
				
			}
			.bottom{width: 100%;height: 40px;background-color: lightseagreen;position: relative;bottom: 0;}
		</style>
	</head>
	<body>
	    <h1>20170111 函数原型及原型链总结</h1>
	    <div class="box">
             <h3>构造函数</h3>

           <p>简单理解为new关键字后面的函数。</p>

<p>函数命名建议首字母大写。</p>

<p>构造函数的特点</p>

<p>1、用new关键字调用，没有显示的创建对象。</p>

<p>2、函数内部可以使用this关键字。this指向的是构造出的新对象，能直接将属性和方法赋给this。</p>

     <p>实例属性：通过该构造函数创建的每个对象，都将拥有一份实例属性的单独拷贝。</p>

<p>3、默认不用return返回值。默认会返回this，也就是新的实例对象。return返回Object 类型时，返回的不是this，所有值类型均返回this。</p>

<p>过程</p>

<p>将构造函数的this 指向实例，将实例的__proto__属性指向构造函数的prototype,创建原型与对象关联。执行构造函数内部的函数代码或将构造函数的代码复制一个拷贝到实例。</p>

<h3>原型对象与实例对象</h3>

<p>在JavaScript中，每个对象都有一个与之相关联的对象，那就是它的原型对象。</p>

<p>类的所有实例对象都从它的原型对象上继承属性。

<p>唯一标识：当且仅当两个对象继承自同一个原型对象时，它们才属于同一个类的实例。</p>

<p>构造函数拥有一个prototype 属性，指向原型，也就是一个对象的原型就是它的构造函数的prototype 属性的值。</p>

<p>可以通过原型来创建属性和方法。通过原型创建的属性和方法时被所有实例所共享的。也就是在一个实例中修改了该属性或方法的值，所有其他实例的属性或方法值都会受到影响。</p>

<p>function Person(name,age){</p>

<p>this.name=name;</p>

<p>this.age=age</p>

<p>}</p>

<p>Person.prototype.friends=["Tom","Sam"];</p>

<p>var p1=new Preson("Lily",24);</p>

<p>var p1=new Preson("Suan",20);</p>

<p>alert(p1.friends);//Tom,Sam</p>

<p>alert(p2.friends);//Tom,Sam</p>

<p>p1.friends.push("Bill");</p>

<p>alert(p1.friends);//Tom,Sam,Bill</p>

<p>alert(p1.friends);//Tom,Sam,Bill</p>

<p>建议在构造函数内定义一般成员，也就是它的值在每个实例中都将不同，尤其是对象或数组形式的值；而在原型对象中则定义一些所有实例所共享的属性，即在所有实例中，它的值可以是相同的属性。</p>

<p>用构造函数创建一个实例时，实例的内部也包括了一个指针，指向构造函数的原型对象。一些浏览器支持一个__proto__ 来表示这个内部指针。</p>
            </div>
            <div class="bottom"></div>
	</body>
	<script>
		
		var day = new Date(2008,2,0);
		
		var days = day.getDate();
		
		console.log(days);
		
	</script>
</html>
